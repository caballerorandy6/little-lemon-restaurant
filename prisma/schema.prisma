generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  password     String
  role         Role         @default(USER)
  reservations Reservation[]
  reviews      Review[]
  cart         Cart?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Reservation {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  date       DateTime
  time       String
  guests     Int
  createdAt  DateTime  @default(now())
}

model Category {
  id            Int      @id @default(autoincrement())
  strCategory   String   @unique      // Ej: "Beef", "Seafood"
  description   String
  thumb         String                 // Imagen representativa
  meals         Meal[]
}

model Meal {
  id              Int       @id @default(autoincrement())
  strMeal         String    @unique
  strMealThumb    String
  strInstructions String
  strArea         String?
  strTags         String?
  strYoutube      String?
  ingredients     Json?     // Alternativamente, una relaci√≥n muchos-a-muchos
  categoryId      Int
  category        Category  @relation(fields: [categoryId], references: [id])
  reviews         Review[]
  cartItems       CartItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Review {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  meal       Meal    @relation(fields: [mealId], references: [id])
  mealId     Int
  rating     Int     // de 1 a 5 por ejemplo
  comment    String
  createdAt  DateTime  @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  meal      Meal     @relation(fields: [mealId], references: [id])
  mealId    Int
  quantity  Int
  image     String
}



// model User {
//   id        Int       @id @default(autoincrement())
//   name      String
//   email     String    @unique
//   password  String
//   role      Role      @default(USER)
//   reservations Reservation[]
//   reviews   Review[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// model Reservation {
//   id         Int       @id @default(autoincrement())
//   user       User      @relation(fields: [userId], references: [id])
//   userId     Int
//   date       DateTime
//   time       String
//   guests     Int
//   createdAt  DateTime  @default(now())
// }

// model MenuItem {
//   id          Int       @id @default(autoincrement())
//   name        String
//   description String
//   price       Float
//   category    String
//   reviews     Review[]
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }

// model Review {
//   id         Int       @id @default(autoincrement())
//   user       User      @relation(fields: [userId], references: [id])
//   userId     Int
//   menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
//   menuItemId Int
//   rating     Int
//   comment    String
//   createdAt  DateTime  @default(now())
// }

// enum Role {
//   ADMIN
//   USER
// }